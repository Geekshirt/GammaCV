webpackJsonp([38],{532:function(e,t){e.exports=[{license:"MIT",author:"Mihail Zachepilo(mihailzachepilo@gmail.com)\nCopyright 2018 Peculiar Ventures and Pentatonica.\nAll rights reserved."},{type:"class",name:"Tensor",description:[{type:"paragraph",children:["N Dimensional data view, that helps create, store, manipulate data."]}],params:[{name:"dtype",description:"the data type for tensor instance",type:[{type:"string"}]},{name:"shape",description:"the list of integers,",type:[{applications:[{type:"number"}],type:"Array"}]},{name:"data",description:"initial data to store",type:[{type:"DataView"},{type:"Array"}],optional:!0},{name:"stride",description:"custom mapping from plain to NDArray",type:[{applications:[{type:"number"}],type:"Array"}],optional:!0},{name:"offset",description:"number of data elements to skip",type:[{type:"number"}],optional:!0}],methods:[{name:"get",type:"method",description:[{type:"paragraph",children:["Get data element by coordinates"]}],params:[{name:"x",description:"coordinates\n\nRequire N number arguments, where n - dimention of a tensor.",type:[{type:"number"}],rest:!0}],return:{description:null,type:[{type:"number"}],optional:!1},examples:[{title:"example",description:"const t = new gm.Tensor('uint8', [2, 3], new Uint8Array([1, 2, 3, 4, 5, 6]));\nt.get(0, 0); // 1\nt.get(0, 1); // 2\nt.get(1, 2); // 6"}]},{name:"Tensor.assign",params:[{name:"data",description:null,type:[{type:"DataView"},{type:"Array"}]}],return:{description:"self",type:[{type:"Tensor"}],optional:!1},type:"method"},{description:[{type:"paragraph",children:["Write zeros into tensor's data"]}],return:{description:"self",type:[{type:"Tensor"}],optional:!1},name:"relese",params:[],type:"method"},{return:{description:"a shallow copy, new instance",type:[{type:"Tensor"}],optional:!1},name:"clone",params:[],type:"method"},{static:!0,params:[{name:"shape",description:null,type:[{applications:[{type:"number"}],type:"Array"}]},{name:"index",description:null,type:[{type:"number"}]}],return:{description:"coordinets that maps to the entered index",type:[{applications:[{type:"number"}],type:"Array"}],optional:!1},name:"IndexToCoord",type:"method"},{static:!0,params:[{name:"shape",description:null,type:[{applications:[{type:"number"}],type:"Array"}]},{name:"coords",description:null,type:[{applications:[{type:"number"}],type:"Array"}]}],return:{description:"index that mapped from entered coords",type:[{type:"number"}],optional:!1},name:"CoordToIndex",type:"method"},{static:!0,params:[{name:"dtype",description:null,type:[{type:"string"}]},{name:"size",description:null,type:[{type:"number"}]}],return:{description:null,type:[{type:"Tensor"}],optional:!1},name:"Malloc",type:"method"},{static:!0,description:[{type:"paragraph",children:["Define data type of an argument"]}],params:[{name:"data",description:null,type:[{type:"DataView"},{type:"Array"}]}],return:{description:null,type:[{type:"string"}],optional:!1},examples:[{title:"example",description:"gm.Tensor.DefineType(new Float32Array()); // float32"}],name:"DefineType",type:"method"},{static:!0,description:[{type:"paragraph",children:["Generate DataView"]}],params:[{name:"dtype",description:"data type of view",type:[{type:"string"}]},{name:"data",description:"initial data",type:[{type:"DataView"},{type:"Array"}]}],return:{description:null,type:[{type:"DataView"},{type:"Array"}],optional:!1},name:"GetTypedArray",type:"method"},{static:!0,params:[{name:"shape",description:null,type:[{applications:[{type:"number"}],type:"Array"}]}],return:{description:"Number of elements that described by shape",type:[{type:"number"}],optional:!1},name:"GetSize",type:"method"}]}]}});